import pandas as pd
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, filters, \
    ConversationHandler
import os
import dotenv
import re
import hashlib

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
AUTH, REGISTER, MAIN_MENU, DIRECTION_SELECT, GROUP_SELECT, SEARCH_FIO = range(6)
dotenv.load_dotenv()


def load_schedule():
    try:
        df = pd.read_excel("raspisanie_by_cabinets.xlsx", header=0)
        df = df.dropna(how='all')
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None


def load_users():
    try:
        if os.path.exists("users.xlsx"):
            df = pd.read_excel("users.xlsx")
            return df
        return pd.DataFrame(columns=['–§–ò–û', '–ì—Ä—É–ø–ø–∞'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return pd.DataFrame(columns=['–§–ò–û', '–ì—Ä—É–ø–ø–∞'])


def load_auth_data():
    try:
        if os.path.exists("auth_data.xlsx"):
            df = pd.read_excel("auth_data.xlsx")
            return df
        return pd.DataFrame(columns=['user_id', 'username', 'full_name', 'login', 'password_hash'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return pd.DataFrame(columns=['user_id', 'username', 'full_name', 'login', 'password_hash'])


def save_auth_data(df):
    try:
        df.to_excel("auth_data.xlsx", index=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")


def save_users(df):
    try:
        df.to_excel("users.xlsx", index=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


def extract_directions(df):
    directions = set()
    for direction in df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].dropna():
        if isinstance(direction, str):
            directions.add(direction.strip())
    return sorted(directions)


def extract_groups(df, direction=None):
    groups = set()
    if direction:
        filtered = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == direction]
    else:
        filtered = df

    for group in filtered['–ì—Ä—É–ø–ø–∞'].dropna():
        if isinstance(group, str):
            groups.add(group.strip())
    return sorted(groups)


async def show_developer_info(update: Update, context: CallbackContext):
    developer_info = """
üë®‚Äçüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ:

üìå –ò–º—è: –í–∞—É–ª–∏–Ω –ú–∞—Ç–≤–µ–π –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á
üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: –ú–∞–ª—å—Ü–µ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
üìß Email: SyLex74@yandex.ru
üìÖ –û–±—É—á–µ–Ω–∏–µ: 4 –≥–æ–¥–∞ IT-cube –≥.–°–∞—Ç–∫–∞
üõ†Ô∏è –ó–∞–∫–æ–Ω—á–∏–ª –∫—É—Ä—Å—ã:
    - –°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    - –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞(3D)
    - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @SyLex_74
"""
    await update.message.reply_text(
        developer_info,
        reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
    )
    return MAIN_MENU


async def start(update: Update, context: CallbackContext):
    if not os.path.exists("raspisanie_by_cabinets.xlsx"):
        await update.message.reply_text(
            "–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª 'raspisanie_by_cabinets.xlsx' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –±–æ—Ç.")
        return ConversationHandler.END

    auth_data = load_auth_data()
    user_id = update.effective_user.id

    if not auth_data.empty and user_id in auth_data['user_id'].values:
        context.user_data['authorized'] = True
        return await show_main_menu(update, context)
    else:
        keyboard = [
            ['üîë –í–æ–π—Ç–∏', 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'],
            ['‚ÑπÔ∏è –û –±–æ—Ç–µ']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return AUTH


async def handle_auth_choice(update: Update, context: CallbackContext):
    choice = update.message.text

    if '–í–æ–π—Ç–∏' in choice:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        context.user_data['auth_step'] = 'login'
        return AUTH
    elif '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' in choice:
        await update.message.reply_text(
            "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        context.user_data['auth_step'] = 'register_login'
        return REGISTER
    elif '–û –±–æ—Ç–µ' in choice:
        await update.message.reply_text(
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≤ IT-Cube.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=ReplyKeyboardMarkup([['üîë –í–æ–π—Ç–∏', 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è']],
                                             one_time_keyboard=True, resize_keyboard=True)
        )
        return AUTH
    else:
        return await start(update, context)


async def handle_login(update: Update, context: CallbackContext):
    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await start(update, context)

    login = update.message.text.strip()
    context.user_data['login'] = login

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
    )
    context.user_data['auth_step'] = 'password'
    return AUTH


async def handle_password(update: Update, context: CallbackContext):
    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await start(update, context)

    password = update.message.text.strip()
    auth_data = load_auth_data()
    login = context.user_data.get('login')

    user_record = auth_data[(auth_data['login'] == login) &
                            (auth_data['password_hash'] == hash_password(password))]

    if not user_record.empty:
        user_id = update.effective_user.id
        auth_data.loc[auth_data['login'] == login, ['user_id', 'username', 'full_name']] = [
            user_id,
            update.effective_user.username,
            update.effective_user.full_name
        ]
        save_auth_data(auth_data)

        context.user_data['authorized'] = True
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return AUTH


async def handle_register_login(update: Update, context: CallbackContext):
    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await start(update, context)

    login = update.message.text.strip()
    auth_data = load_auth_data()

    if not auth_data.empty and login in auth_data['login'].values:
        await update.message.reply_text(
            "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return REGISTER

    context.user_data['login'] = login
    await update.message.reply_text(
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):",
        reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
    )
    context.user_data['auth_step'] = 'register_password'
    return REGISTER


async def handle_register_password(update: Update, context: CallbackContext):
    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await start(update, context)

    password = update.message.text.strip()
    if len(password) < 4:
        await update.message.reply_text(
            "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return REGISTER

    context.user_data['password'] = password
    await update.message.reply_text(
        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
    )
    context.user_data['auth_step'] = 'confirm_password'
    return REGISTER


async def handle_confirm_password(update: Update, context: CallbackContext):
    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await start(update, context)

    confirm_password = update.message.text.strip()
    password = context.user_data.get('password')

    if confirm_password != password:
        await update.message.reply_text(
            "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        context.user_data['auth_step'] = 'register_password'
        return REGISTER

    user = update.effective_user
    auth_data = load_auth_data()

    new_user = pd.DataFrame([{
        'user_id': user.id,
        'username': user.username,
        'full_name': user.full_name,
        'login': context.user_data['login'],
        'password_hash': hash_password(password)
    }])

    auth_data = pd.concat([auth_data, new_user], ignore_index=True)
    save_auth_data(auth_data)

    context.user_data['authorized'] = True
    await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    return await show_main_menu(update, context)


async def show_main_menu(update: Update, context: CallbackContext):
    keyboard = [
        ['üìÖ –í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û'],
        ['üìã –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'],
        ['‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return MAIN_MENU


async def main_menu(update: Update, context: CallbackContext):
    if not context.user_data.get('authorized', False):
        return await start(update, context)

    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await show_main_menu(update, context)

    choice = update.message.text

    if '–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in choice:
        df = load_schedule()
        if df is None:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return await show_main_menu(update, context)

        directions = extract_directions(df)
        if not directions:
            await update.message.reply_text("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            return await show_main_menu(update, context)

        keyboard = [directions[i:i + 2] for i in range(0, len(directions), 2)]
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=reply_markup)
        return DIRECTION_SELECT

    elif '–ü–æ–∏—Å–∫ –ø–æ –§–ò–û' in choice:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã:",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return SEARCH_FIO

    elif '–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in choice:
        df = load_schedule()
        if df is None:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return await show_main_menu(update, context)

        response = "üìã –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        current_direction = None

        for _, row in df.iterrows():
            if pd.notna(row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']) and row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] != current_direction:
                current_direction = row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
                response += f"\nüåü –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {current_direction}\n"
                response += f"üìç –ö–∞–±–∏–Ω–µ—Ç: {row['–ö–∞–±–∏–Ω–µ—Ç']}\n"
                response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

            response += f"üë• –ì—Ä—É–ø–ø–∞: {row['–ì—Ä—É–ø–ø–∞']}\n"
            response += f"üë®‚Äçüè´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {row['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']}\n"
            response += f"üìÖ {row['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏']} | üïí {row['–í—Ä–µ–º—è']}\n"
            response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        for i in range(0, len(response), 4000):
            await update.message.reply_text(
                response[i:i + 4000],
                reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
            )

        return await show_main_menu(update, context)

    elif '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' in choice:
        return await show_developer_info(update, context)

    elif '–ü—Ä–æ—Ñ–∏–ª—å' in choice:
        auth_data = load_auth_data()
        user_id = update.effective_user.id
        user_data = auth_data[auth_data['user_id'] == user_id].iloc[0]

        await update.message.reply_text(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üÜî ID: {user_data['user_id']}\n"
            f"üë§ –ò–º—è: {user_data['full_name']}\n"
            f"üìõ –õ–æ–≥–∏–Ω: {user_data['login']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return MAIN_MENU


async def handle_direction_select(update: Update, context: CallbackContext):
    if not context.user_data.get('authorized', False):
        return await start(update, context)

    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await show_main_menu(update, context)

    selected_direction = update.message.text.strip()
    context.user_data['selected_direction'] = selected_direction

    df = load_schedule()
    groups = extract_groups(df, selected_direction)

    keyboard = [groups[i:i + 3] for i in range(0, len(groups), 3)]
    keyboard.append(['–í—Å–µ –≥—Ä—É–ø–ø—ã', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {selected_direction}\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=reply_markup
    )
    return GROUP_SELECT


async def handle_group_select(update: Update, context: CallbackContext):
    if not context.user_data.get('authorized', False):
        return await start(update, context)

    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await main_menu(update, context)

    selected_group = update.message.text.strip()
    df = load_schedule()

    if selected_group == '–í—Å–µ –≥—Ä—É–ø–ø—ã':
        selected_direction = context.user_data.get('selected_direction')
        group_schedule = df[df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == selected_direction]

        response = f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {selected_direction}:\n\n"

        for _, row in group_schedule.iterrows():
            response += f"üë• –ì—Ä—É–ø–ø–∞: {row['–ì—Ä—É–ø–ø–∞']}\n"
            response += f"üë®‚Äçüè´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {row['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']}\n"
            response += f"üìÖ {row['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏']} | üïí {row['–í—Ä–µ–º—è']}\n"
            response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        await update.message.reply_text(
            response,
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return await show_main_menu(update, context)
    else:
        group_schedule = df[df['–ì—Ä—É–ø–ø–∞'] == selected_group]

        if group_schedule.empty:
            await update.message.reply_text(
                f"–î–ª—è –≥—Ä—É–ø–ø—ã {selected_group} –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
            )
            return await show_main_menu(update, context)

        group_info = group_schedule.iloc[0]
        response = (
            f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã:\n"
            f"üåü –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {group_info['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
            f"üìç –ö–∞–±–∏–Ω–µ—Ç: {group_info['–ö–∞–±–∏–Ω–µ—Ç']}\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_info['–ì—Ä—É–ø–ø–∞']}\n"
            f"üë®‚Äçüè´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {group_info['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']}\n\n"
        )

        for _, row in group_schedule.iterrows():
            response += f"üìÖ {row['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏']} | üïí {row['–í—Ä–µ–º—è']}\n"
            response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        await update.message.reply_text(
            response,
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return await show_main_menu(update, context)


def normalize_name(name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    return ' '.join(re.sub(r'[^\w\s]', '', name.lower()).split())


def is_name_match(search_name, target_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    if not search_name or not target_name or pd.isna(target_name):
        return False

    search_parts = normalize_name(search_name).split()
    target_parts = normalize_name(target_name).split()

    return all(part in ' '.join(target_parts) for part in search_parts)


async def handle_fio_search(update: Update, context: CallbackContext):
    if not context.user_data.get('authorized', False):
        return await start(update, context)

    if update.message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await show_main_menu(update, context)

    search_name = update.message.text.strip()
    users_df = load_users()
    schedule_df = load_schedule()

    if users_df.empty or schedule_df is None:
        await update.message.reply_text(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return SEARCH_FIO

    user_groups = []
    for _, row in users_df.iterrows():
        if is_name_match(search_name, row['–§–ò–û']):
            user_groups.append(row['–ì—Ä—É–ø–ø–∞'])

    if not user_groups:
        for _, row in schedule_df.iterrows():
            if is_name_match(search_name, row['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']):
                user_groups.append(row['–ì—Ä—É–ø–ø–∞'])

    user_groups = sorted(list(set(user_groups)))

    if not user_groups:
        await update.message.reply_text(
            f"–§–ò–û '{search_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return SEARCH_FIO

    if len(user_groups) == 1:
        selected_group = user_groups[0]
        group_schedule = schedule_df[schedule_df['–ì—Ä—É–ø–ø–∞'] == selected_group]

        if group_schedule.empty:
            await update.message.reply_text(
                f"–î–ª—è –≥—Ä—É–ø–ø—ã {selected_group} –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
            )
            return await show_main_menu(update, context)

        group_info = group_schedule.iloc[0]
        response = (
            f"üîç –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ –≤–∞—à–µ–º—É –§–ò–û:\n\n"
            f"üåü –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {group_info['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
            f"üìç –ö–∞–±–∏–Ω–µ—Ç: {group_info['–ö–∞–±–∏–Ω–µ—Ç']}\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_info['–ì—Ä—É–ø–ø–∞']}\n"
            f"üë®‚Äçüè´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {group_info['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']}\n\n"
            f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        )

        for _, row in group_schedule.iterrows():
            response += f"\nüìÖ {row['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏']} | üïí {row['–í—Ä–µ–º—è']}"

        await update.message.reply_text(
            response,
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True)
        )
        return await show_main_menu(update, context)
    else:
        keyboard = [[group] for group in user_groups]
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –¥–ª—è –§–ò–û '{search_name}':\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=reply_markup
        )
        return GROUP_SELECT


def main():
    if not os.path.exists("users.xlsx"):
        pd.DataFrame(columns=['–§–ò–û', '–ì—Ä—É–ø–ø–∞']).to_excel("users.xlsx", index=False)

    if not os.path.exists("auth_data.xlsx"):
        pd.DataFrame(columns=['user_id', 'username', 'full_name', 'login', 'password_hash']).to_excel("auth_data.xlsx",
                                                                                                      index=False)

    app = ApplicationBuilder().token(os.getenv('token', 'No token')).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            AUTH: [
                MessageHandler(filters.Regex(r'^(üîë –í–æ–π—Ç–∏|üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è|‚ÑπÔ∏è –û –±–æ—Ç–µ)$'), handle_auth_choice),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_login)
            ],
            REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_register_login)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            DIRECTION_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_direction_select)],
            GROUP_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_group_select)],
            SEARCH_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_fio_search)],
        },
        fallbacks=[CommandHandler("start", start)]
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == '__main__':
    main()